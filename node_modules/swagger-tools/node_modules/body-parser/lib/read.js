/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

<<<<<<< HEAD
'use strict'

/**
 * Module dependencies.
 * @private
 */

var createError = require('http-errors')
=======
/**
 * Module dependencies.
 */

>>>>>>> 34f03bf259ef6d5f22c22e47eca085eaa7ac4538
var getBody = require('raw-body')
var iconv = require('iconv-lite')
var onFinished = require('on-finished')
var zlib = require('zlib')

/**
 * Module exports.
 */

module.exports = read

/**
 * Read a request into a buffer and parse.
 *
 * @param {object} req
 * @param {object} res
 * @param {function} next
 * @param {function} parse
 * @param {function} debug
<<<<<<< HEAD
 * @param {object} options
 * @private
 */

function read (req, res, next, parse, debug, options) {
  var length
  var opts = options
=======
 * @param {object} [options]
 * @api private
 */

function read(req, res, next, parse, debug, options) {
  var length
>>>>>>> 34f03bf259ef6d5f22c22e47eca085eaa7ac4538
  var stream

  // flag as parsed
  req._body = true

<<<<<<< HEAD
  // read options
  var encoding = opts.encoding !== null
    ? opts.encoding
    : null
  var verify = opts.verify

  try {
    // get the content stream
    stream = contentstream(req, debug, opts.inflate)
    length = stream.length
    stream.length = undefined
=======
  var opts = options || {}

  try {
    stream = contentstream(req, debug, opts.inflate)
    length = stream.length
    delete stream.length
>>>>>>> 34f03bf259ef6d5f22c22e47eca085eaa7ac4538
  } catch (err) {
    return next(err)
  }

<<<<<<< HEAD
  // set raw-body options
  opts.length = length
=======
  opts.length = length

  var encoding = opts.encoding !== null
    ? opts.encoding || 'utf-8'
    : null
  var verify = opts.verify

>>>>>>> 34f03bf259ef6d5f22c22e47eca085eaa7ac4538
  opts.encoding = verify
    ? null
    : encoding

<<<<<<< HEAD
  // assert charset is supported
  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {
    return next(createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
      charset: encoding.toLowerCase(),
      type: 'charset.unsupported'
    }))
  }

  // read body
  debug('read body')
  getBody(stream, opts, function (error, body) {
    if (error) {
      var _error

      if (error.type === 'encoding.unsupported') {
        // echo back charset
        _error = createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
          charset: encoding.toLowerCase(),
          type: 'charset.unsupported'
        })
      } else {
        // set status code on error
        _error = createError(400, error)
=======
  // read body
  debug('read body')
  getBody(stream, opts, function (err, body) {
    if (err) {
      if (!err.status) {
        err.status = 400
      }

      // echo back charset
      if (err.type === 'encoding.unsupported') {
        err = new Error('unsupported charset "' + encoding.toUpperCase() + '"')
        err.charset = encoding.toLowerCase()
        err.status = 415
>>>>>>> 34f03bf259ef6d5f22c22e47eca085eaa7ac4538
      }

      // read off entire request
      stream.resume()
<<<<<<< HEAD
      onFinished(req, function onfinished () {
        next(createError(400, _error))
=======
      onFinished(req, function onfinished() {
        next(err)
>>>>>>> 34f03bf259ef6d5f22c22e47eca085eaa7ac4538
      })
      return
    }

    // verify
    if (verify) {
      try {
        debug('verify body')
        verify(req, res, body, encoding)
      } catch (err) {
<<<<<<< HEAD
        next(createError(403, err, {
          body: body,
          type: err.type || 'entity.verify.failed'
        }))
        return
=======
        if (!err.status) err.status = 403
        return next(err)
>>>>>>> 34f03bf259ef6d5f22c22e47eca085eaa7ac4538
      }
    }

    // parse
<<<<<<< HEAD
    var str = body
    try {
      debug('parse body')
      str = typeof body !== 'string' && encoding !== null
        ? iconv.decode(body, encoding)
        : body
      req.body = parse(str)
    } catch (err) {
      next(createError(400, err, {
        body: str,
        type: err.type || 'entity.parse.failed'
      }))
      return
=======
    try {
      debug('parse body')
      body = typeof body !== 'string' && encoding !== null
        ? iconv.decode(body, encoding)
        : body
      req.body = parse(body)
    } catch (err) {
      if (!err.status) {
        err.body = body
        err.status = 400
      }
      return next(err)
>>>>>>> 34f03bf259ef6d5f22c22e47eca085eaa7ac4538
    }

    next()
  })
}

/**
 * Get the content stream of the request.
 *
 * @param {object} req
 * @param {function} debug
 * @param {boolean} [inflate=true]
 * @return {object}
 * @api private
 */

<<<<<<< HEAD
function contentstream (req, debug, inflate) {
  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()
=======
function contentstream(req, debug, inflate) {
  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()
  var err
>>>>>>> 34f03bf259ef6d5f22c22e47eca085eaa7ac4538
  var length = req.headers['content-length']
  var stream

  debug('content-encoding "%s"', encoding)

  if (inflate === false && encoding !== 'identity') {
<<<<<<< HEAD
    throw createError(415, 'content encoding unsupported', {
      encoding: encoding,
      type: 'encoding.unsupported'
    })
=======
    err = new Error('content encoding unsupported')
    err.status = 415
    throw err
>>>>>>> 34f03bf259ef6d5f22c22e47eca085eaa7ac4538
  }

  switch (encoding) {
    case 'deflate':
      stream = zlib.createInflate()
      debug('inflate body')
      req.pipe(stream)
      break
    case 'gzip':
      stream = zlib.createGunzip()
      debug('gunzip body')
      req.pipe(stream)
      break
    case 'identity':
      stream = req
      stream.length = length
      break
    default:
<<<<<<< HEAD
      throw createError(415, 'unsupported content encoding "' + encoding + '"', {
        encoding: encoding,
        type: 'encoding.unsupported'
      })
=======
      err = new Error('unsupported content encoding "' + encoding + '"')
      err.encoding = encoding
      err.status = 415
      throw err
>>>>>>> 34f03bf259ef6d5f22c22e47eca085eaa7ac4538
  }

  return stream
}
